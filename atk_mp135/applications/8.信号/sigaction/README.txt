sigaction:
        - signum：需要设置的信号，除了SIGKILL和SIGSTOP之外的任何信号；

        - act：是一个指向struct sigaction数据结构的指针，该数据结构描述了信号的处理方式：
          - act不为NULL：表示需要为信号设置新的处理方式；
          - act为NULL：表示无需改变信号当前的处理方式；

        - oldact：也是一个指向struct sigaction数据结构的指针：
          - oldact不为NULL：会将信号之前的处理方式等信息通过参数oldact返回出来；
          - act为NULL：表示无意获取此类信息；

        
        struct sigaction:
            - sa_handler：
                1. 指定信号处理函数，与signal的handler参数相同；
            
            - sa_sigaction：
                1. 也用于指定信号处理函数，这是一个替代的信号处理函数，它提供了更多的参数，可以通过该函数获取到更多信息，这些信号通过 siginfo_t参数获取，稍后介绍该数据结构；
                2. 注意事项：sa_handler和sa_sigaction是互斥的，不能同时设置，对于标准信号来说，使用 sa_handler就可以了，可通过SA_SIGINFO标志进行选择。  
            
            - sa_mask：
              1. sa_mask定义了一组信号，当进程在执行由sa_handler所定义的信号处理函数之前，会先将这组信号添加到进程的信号掩码字段中，当进程执行完处理函数之后将这组信号从信号掩码字段中删除；
                1. 当进程在执行信号处理函数期间，可能又收到同样的信号或其它信号，从而打断当前信号处理函数的执行，类似于中断嵌套。通常在执行信号处理函数期间不希望被另一个信号所打断，那该怎么做呢？
                  1. 就是通过信号掩码来实现，如果进程接收到了信号掩码中的这些信号，那么这个信号将会被阻塞暂时不能得到处理，直到这些信号从进程的信号掩码中移除。如果用户还需要在阻塞其它的信号，则可以通过设置参数sa_mask来完成（此参数是sigset_t类型变量，关于该类型的介绍信息请看 8.6.1小节内容，关于信号掩码还会在8.7.1小节中进一步介绍），信号掩码可以避免一些信号之间的竞争状态（竞态）；
            
            - sa_flags：
              1. sa_flags指定了一组标志，这些标志用于控制信号的处理过程，可设置为如下这些标志（多个标志使用位或"|"组合）：
                1. SA_NOCLDSTOP：
                  1. SIGCHLD：当父进程的某一个子进程终止时，内核会向父进程发送该信号；
                  2. 如果signum为SIGCHLD，则子进程停止时（当它们接收到SIGSTOP、SIGTSTP、SIGTTIN或SIGTTOU中的一种时）或恢复（即它们接收到SIGCONT）时不会收到SIGCHLD信号；
                2. SA_NOCLDWAIT：
                  1. 如果signum为SIGCHLD，则在子进程终止时不要将其转变为僵尸进程；
                3. SA_NODEFER：
                  1. 不要阻塞从某个信号自身的信号处理函数中接收此信号。
                    1. 也就是说当进程此时正在执行某个信号的处理函数，默认情况下，进程会自动将该信号添加到进程的信号掩码字段中，从而在执行信号处理函数期间阻塞该信号，如果设置了SA_NODEFER标志，则表示不对它进行阻塞；
                4. SA_RESETHAND：
                  1. 执行完信号处理函数之后，将信号的处理方式设置为系统默认操作；
                5. SA_RESTART：
                  1. 被信号中断的系统调用，在信号处理完成之后将自动重新发起。  ；
                6. SA_SIGINFO：
                  1. 如果设置了该标志，则表示使用sa_sigaction作为信号处理函数、而不是sa_handler；
            
            - sa_restorer：
              1. 该成员已过时，不再使用；